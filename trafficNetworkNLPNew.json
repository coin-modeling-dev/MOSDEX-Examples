{
  "trafficNetworkNLP": {
    "CLASS": "PROBLEM",
    "HEADING": {
      "DESCRIPTION": [
        "Quadratically constrained network problem",
        "Formulated as a nonlinear program"
      ],
      "REFERENCE": "https://ampl.com/MEETINGS/TALKS/2015_11_Philadelphia_MC19.pdf",
      "VERSION": "1.1 (no version 1.0 of NLP)",
      "AUTHOR": "Jeremy A. Bloom (jeremyblmca@gmail.com)",
      "NOTICES": ["Copyright Â© 2019 Jeremy A. Bloom"],
      "MATH": [
        "var Flow {(i,j) in ROADS} >= 0, <= .9999 * cap[i,j];",
        "var Delay{ROADS} >= 0;",
        "minimize Avg_Time: sum {(i,j) in ROADS} (base[i,j]*Flow[i,j] + Delay[i,j]) / through;",
        "subject to Delay_Def {(i,j) in ROADS}:",
        "   sens[i,j] * Flow[i,j]^2 + (Flow[i,j]/cap[i,j] - 1) * Delay[i,j] <= 0.0;",
        "subject to Balance_Node {i in INTERS}:",
        "   sum{(i,j) in ROADS} Flow[i,j] = sum{(j,i) in ROADS} Flow[j,i];",
        "subject to Balance_Enter:",
        "   sum{(EN,j) in ROADS} Flow[EN,j] = through;"
      ]
    },
    "roads": {
      "CLASS": "DATA",
      "ROLE": "INPUT",
      "SCHEMA": {
        "origin": "STRING",
        "destination": "STRING",
        "base": "DOUBLE",
        "capacity": "DOUBLE",
        "sensitivity": "DOUBLE"
      },
      "FIELDS": ["origin", "destination", "base", "capacity", "sensitivity"],
      "INSTANCE": [
        [        "a",      "b",           4.0,    10.0,       0.1],
        [        "a",      "c",           1.0,    12.0,       0.7],
        [        "c",      "b",           2.0,    20.0,       0.9],
        [        "b",      "d",           1.0,    15.0,       0.5],
        [        "c",      "d",           6.0,    10.0,       0.1]
      ]
    },
    "parameters": {
      "CLASS": "DATA",
      "ROLE": "INPUT",
      "SINGLETON": {
        "entrance": "a",
        "exit": "d",
        "throughput": 20.0}
    },
    "flow": {
      "CLASS": "VARIABLE",
      "TYPE": "CONTINUOUS",
      "ROLE": "OPTIMIZATION",
      "RECIPE": {
        "SELECT": [
          "'flow' AS Name",
          "'CONTINUOUS' AS Type",
          "origin",
          "destination",
          "CONCAT('flow','_', origin,'_', destination) AS Column",
          "0.0 As LowerBound",
          "0.999* capacity AS UpperBound",
          "Solver.getCurrentValue(Column) AS Value"
        ],
        "FROM": ["roads"]
      }
    },
    "delay": {
      "CLASS": "VARIABLE",
      "TYPE": "CONTINUOUS",
      "ROLE": "OPTIMIZATION",
      "RECIPE": {
        "SELECT": [
          "'delay' AS Name",
          "'CONTINUOUS' AS Type",
          "origin",
          "destination",
          "CONCAT('delay','_', origin,'_', destination) AS Column",
          "0.0 As LowerBound",
          "'infinity' AS UpperBound",
          "Solver.getCurrentValue(Column) AS Value"
        ],
        "FROM": ["roads"]
      }
    },
    "avgTime": {
      "CLASS": "OBJECTIVE",
      "TYPE": "LINEAR",
      "ROLE": "OPTIMIZATION",
      "SINGLETON": {
        "Name": "avgTime",
        "Type": "LINEAR",
        "Row": "avgTime",
        "Constant": 0.0,
        "Sense":"MINIMIZE",
        "Value": "Solver.getCurrentObjectiveValue()"
      }
    },
    "avgTime_flow": {
      "CLASS": "TERM",
      "TYPE": "LINEAR",
      "ROLE": "OPTIMIZATION",
      "RECIPE": {
        "SELECT": [
          "'LINEAR' AS Type",
          "'avgTime' AS Row",
          "flow.Column AS Column",
          "roads.base/parameters.throughput AS Coefficient"],
        "FROM": ["flow", "parameters"],
        "JOIN": ["JOIN roads", "USING (origin, destination)"]
      }
    },
    "avgTime_delay": {
      "CLASS": "TERM",
      "TYPE": "LINEAR",
      "ROLE": "OPTIMIZATION",
      "RECIPE": {
        "SELECT": [
          "'LINEAR' AS Type",
          "'avgTime' AS Row",
          "delay.Column AS Column",
          "-1.0 AS Coefficient"],
        "FROM": ["delay", "parameters"]
      }
    },
    "delayDef": {
      "CLASS": "CONSTRAINT",
      "TYPE": "NONLINEAR",
      "ROLE": "OPTIMIZATION",
      "RECIPE": {
        "SELECT": [
          "'delayDef' AS Name",
          "origin",
          "destination",
          "CONCAT('delayDef','_', origin,'_', destination) AS Row",
          "'NONLINEAR' AS Type",
          "'LE' AS Sense",
          "0.0 AS RHS"],
        "FROM": ["roads"]
      }
    },
    "delayDefExpression": {
      "CLASS": "EXPRESSION",
      "NODES": [
        {
          "ID": 0,
          "OPERATION": "PARAMETER",
          "TYPE": "UNARY",
          "RECIPE": {
            "SELECT": ["PARAMETER AS Operation", "origin", "destination", "sensitivity AS Operand", "sensitivity AS Result"],
            "FROM": ["roads"]
          }
        },
        {
          "ID": 1,
          "OPERATION": "INDEPENDENT_VARIABLE",
          "TYPE": "UNARY",
          "RECIPE": {
            "SELECT": ["INDEPENDENT_VARIABLE AS Operation", "origin", "destination", "Column AS Operand", "Solver.getCurrentValue(Operand) AS Result"],
            "FROM": ["flow"]
          }
        },
        {
          "ID": 2,
          "OPERATION": "SQUARE",
          "TYPE": "UNARY",
          "RECIPE": {
            "SELECT": ["SQUARE AS Operation", "origin", "destination", "Result AS Operand",
              "Operand^2 AS Result"],
            "FROM": ["NODES[1]"]
          }
        },
        {
          "ID": 3,
          "OPERATION": "MULTIPLY",
          "TYPE": "BINARY",
          "RECIPE": {
            "SELECT": ["MULTIPLY AS Operation", "origin", "destination", "NODES[0].Result AS Operand_1",
              "NODES[2].Result AS Operand_2", "Operand_1 * Operand_2 AS Result"],
            "FROM": ["NODES[2]"],
            "JOIN": ["JOIN NODES[0]", "USING (origin, destination)"]
          }
        },
        {
          "ID": 4,
          "OPERATION": "PARAMETER",
          "TYPE": "UNARY",
          "RECIPE": {
            "SELECT": ["PARAMETER AS Operation", "origin", "destination", "capacity AS Operand", "capacity AS Result"],
            "FROM": ["roads"]
          }
        },
        {
          "ID": 5,
          "OPERATION": "DIVIDE",
          "TYPE": "BINARY",
          "RECIPE": {
            "SELECT": ["DIVIDE AS Operation", "origin", "destination", "NODES[1].Result AS Operand_1",
              "NODES[4].Result AS Operand_2", "Operand_1 / Operand_2 AS Result"],
            "FROM": ["NODES[4]"],
            "JOIN": ["JOIN NODES[1]", "USING (origin, destination)"]
          }
        },
        {
          "ID": 6,
          "OPERATION": "SUBTRACT",
          "TYPE": "BINARY",
          "RECIPE": {
            "SELECT": ["SUBTRACT AS Operation", "origin", "destination", "NODES[5].Result AS Operand_1",
              "1.0 Operand_2", "Operand_1 - Operand_2 AS Result"],
            "FROM": ["NODES[5]"]
          }
        },
        {
          "ID": 7,
          "OPERATION": "INDEPENDENT_VARIABLE",
          "TYPE": "UNARY",
          "RECIPE": {
            "SELECT": ["INDEPENDENT_VARIABLE AS Operation", "origin", "destination", "Column AS Operand", "Solver.getCurrentValue(Operand) AS Result"],
            "FROM": ["delay"]
          }
        },
        {
          "ID": 8,
          "OPERATION": "MULTIPLY",
          "TYPE": "BINARY",
          "RECIPE": {
            "SELECT": ["MULTIPLY AS Operation", "origin", "destination", "NODES[6].Result AS Operand_1",
              "NODES[7].Result AS Operand_2", "Operand_1 * Operand_2 AS Result"],
            "FROM": ["NODES[6]"],
            "JOIN": ["JOIN NODES[7]", "USING (origin, destination)"]
          }
        },
        {
          "ID": 9,
          "OPERATION": "ADD",
          "TYPE": "BINARY",
          "RECIPE": {
            "SELECT": ["ADD AS Operation", "origin", "destination", "NODES[3].Result AS Operand_1",
              "NODES[8].Result AS  Operand_2", "Operand_1 + Operand_2 AS Result"],
            "FROM": ["NODES[3]"],
            "JOIN": ["JOIN NODES[8]", "USING (origin, destination)"]
          }
        },
        {
          "ID": 10,
          "OPERATION": "DEPENDENT_VARIABLE",
          "TYPE": "UNARY",
          "RECIPE": {
            "SELECT": [
              "DEPENDENT_VARIABLE AS Operation",
              "NODES[9].Result AS Operand",
              "Operand AS Result",
              "Result AS Value",
              "'delayDefExpression' AS Name",
              "origin",
              "destination",
              "CONCAT(Name,'_', origin,'_', destination) AS Column"
            ],
            "FROM": ["NODES[9]"]
          }
        }
      ]
    },
    "delayDef_delayDefExpression": {
      "CLASS": "TERM",
      "TYPE": "NONLINEAR",
      "ROLE": "OPTIMIZATION",
      "RECIPE": {
        "SELECT": [
          "'NONLINEAR' AS Type",
          "delayDef.Row AS Row",
          "NODES[10].Column AS Column",
          "1.0 AS Coefficient"],
        "FROM": ["delayDef"],
        "JOIN": ["JOIN NODES[10]", "USING (origin, destination)"]
      }
    },
    "balanceNode": {
      "CLASS": "CONSTRAINT",
      "TYPE": "LINEAR",
      "ROLE": "OPTIMIZATION",
      "RECIPE": {
        "SELECT": [
          "'balanceNode' AS Name",
          "origin",
          "CONCAT('balanceNode','_', origin) AS Row",
          "'LINEAR' AS Type",
          "'EQ' AS Sense",
          "0.0 AS RHS"],
        "FROM": ["roads"]
      }
    },
    "balanceNode_flowOut": {
      "CLASS": "TERM",
      "TYPE": "LINEAR",
      "ROLE": "OPTIMIZATION",
      "RECIPE": {
        "SELECT": [
          "balanceNode.Row AS Row",
          "flow.Column AS Column",
          "1.0 AS Coefficient"],
        "FROM": ["balanceNode"],
        "JOIN": ["flow", "USING origin"]
      }
    },
    "balanceNode_flowIn": {
      "CLASS": "TERM",
      "ROLE": "OPTIMIZATION",
      "RECIPE": {
        "SELECT": [
          "'LINEAR' AS Type",
          "balanceNode.Row AS Row",
          "flow.Column AS Column",
          "-1.0 AS Coefficient"],
        "FROM": ["balanceNode"],
        "JOIN": ["flow", "ON (balanceNode.origin = flow.destination)"]
      }
    },
    "balanceEnter": {
      "CLASS": "CONSTRAINT",
      "TYPE": "LINEAR",
      "ROLE": "OPTIMIZATION",
      "RECIPE": {
        "SELECT": [
          "'balanceEnter' AS Name",
          "parameters.entrance AS origin",
          "CONCAT('balanceEnter') AS Row",
          "'LINEAR' AS Type",
          "'EQ' AS Sense",
          "parameters.throughput AS RHS"],
        "FROM": ["parameters"]
      }
    },
    "balanceEnter_flowOut": {
      "CLASS": "TERM",
      "TYPE": "LINEAR",
      "ROLE": "OPTIMIZATION",
      "RECIPE": {
        "SELECT": [
          "'LINEAR' AS Type",
          "balanceEnter.Row AS Row",
          "flow.Column AS Column",
          "1.0 AS Coefficient"],
        "FROM": ["balanceEnter"],
        "JOIN": ["flow", "USING origin"]
      }
    }
  }
}