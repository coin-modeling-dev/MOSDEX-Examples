{
  "SYNTAX": "MOSDEX/MOSDEX v1-2/MOSDEXSchemaV1-2.json",
  "trafficNetworkQP": {
    "CLASS": "PROBLEM",
    "HEADING": {
      "DESCRIPTION": ["Quadratically constrained network problem"],
      "REFERENCE": ["https://ampl.com/MEETINGS/TALKS/2015_11_Philadelphia_MC19.pdf"],
      "VERSION": ["1-2"],
      "AUTHOR": ["Jeremy A. Bloom (jeremyblmca@gmail.com)"],
      "NOTICES": ["Copyright Â© 2019 Jeremy A. Bloom"],
      "MATH": [
        "var Flow {(i,j) in ROADS} >= 0, <= .9999 * cap[i,j];",
        "var Delay{ROADS} >= 0;",
        "minimize Avg_Time: sum {(i,j) in ROADS} (base[i,j]*Flow[i,j] + Delay[i,j]) / throughput;",
        "subject to Delay_Def {(i,j) in ROADS}:",
        "   sensitivity[i,j] * Flow[i,j]^2 +Flow[i,j]/capacity[i,j] * Delay[i,j] -Delay[i,j] <= 0.0;",
        "subject to Balance_Node {i in INTERS}:",
        "   sum{(i,j) in ROADS} Flow[i,j] -sum{(j,i) in ROADS} Flow[j,i] = 0.0;",
        "subject to Balance_Enter:",
        "   sum{(parameters.entrance,j) in ROADS} Flow[parameters.entrance,j] = throughput"
      ]
    },
    "roads": {
      "CLASS": "DATA",
      "TYPE": "INPUT",
      "SCHEMA": {
        "origin": "STRING",
        "destination": "STRING",
        "base": "DOUBLE",
        "capacity": "DOUBLE",
        "sensitivity": "DOUBLE"
      },
      "FIELDS": ["origin", "destination", "base", "capacity", "sensitivity"],
      "INSTANCE": [
        [        "a",      "b",           4.0,    10.0,       0.1          ],
        [        "a",      "c",           1.0,    12.0,       0.7          ],
        [        "c",      "b",           2.0,    20.0,       0.9          ],
        [        "b",      "d",           1.0,    15.0,       0.5          ],
        [        "c",      "d",           6.0,    10.0,       0.1          ]
      ]
    },
    "parameters": {
      "CLASS": "DATA",
      "TYPE": "INPUT",
      "SINGLETON": {
        "entrance": "a",
        "exit": "d",
        "throughput": 20.0}
    },
    "flow": {
      "CLASS": "VARIABLE",
      "TYPE": "CONTINUOUS",
      "RECIPE": [
        {"DIRECTIVE": ["SELECT"], "PREDICATE": [
          "'flow' AS Name",
          "'CONTINUOUS' AS Type",
          "origin",
          "destination",
          "CONCAT('flow','_', origin,'_', destination) AS Column",
          "0.0 As LowerBound",
          "0.999* capacity AS UpperBound",
          "#Solver.getCurrentValue(Column) AS Value"]
        },
        {"DIRECTIVE": ["FROM"], "PREDICATE": ["roads"]}
      ]
    },
    "delay": {
      "CLASS": "VARIABLE",
      "TYPE": "CONTINUOUS",
      "RECIPE": [
        {"DIRECTIVE": ["SELECT"], "PREDICATE": [
          "'delay' AS Name",
          "'CONTINUOUS' AS Type",
          "origin",
          "destination",
          "CONCAT('delay','_', origin,'_', destination) AS Column",
          "0.0 As LowerBound",
          "'infinity' AS UpperBound",
          "#Solver.getCurrentValue(Column) AS Value"]
        },
        {"DIRECTIVE": ["FROM"], "PREDICATE": ["roads"]}
      ]
    },
    "avgTime": {
      "CLASS": "OBJECTIVE",
      "TYPE": "LINEAR",
      "SINGLETON": {
        "Name": "avgTime",
        "Type": "LINEAR",
        "Row": "avgTime",
        "Constant": 0.0,
        "Sense":"MINIMIZE",
        "Value": "#Solver.getCurrentObjectiveValue()"
      }
    },
    "avgTime_flow": {
      "CLASS": "TERM",
      "TYPE": "LINEAR",
      "RECIPE": [
        {"DIRECTIVE": ["SELECT"], "PREDICATE": [
          "'LINEAR' AS Type",
          "'avgTime' AS Row",
          "flow.Column AS Column",
          "roads.base/parameters.throughput AS Coefficient"]
        },
        {"DIRECTIVE": ["FROM"], "PREDICATE": ["flow", "parameters"]},
        {"DIRECTIVE": ["JOIN"], "PREDICATE": ["roads"]},
        {"DIRECTIVE": ["USING"], "PREDICATE": ["(origin, destination)"]}
      ]
    },
    "avgTime_delay": {
      "CLASS": "TERM",
      "TYPE": "LINEAR",
      "RECIPE": [
        {"DIRECTIVE": ["SELECT"], "PREDICATE": [
          "'LINEAR' AS Type",
          "'avgTime' AS Row",
          "delay.Column AS Column",
          "-1.0 AS Coefficient"]
        },
        {"DIRECTIVE": ["FROM"], "PREDICATE": ["delay", "parameters"]}
      ]
    },
    "delayDef": {
      "CLASS": "CONSTRAINT",
      "TYPE": "QUADRATIC",
      "RECIPE": [
        {"DIRECTIVE": ["SELECT"], "PREDICATE": [
          "'delayDef' AS Name",
          "origin",
          "destination",
          "CONCAT('delayDef','_', origin,'_', destination) AS Row",
          "'QUADRATIC' AS Type",
          "'LE' AS Sense",
          "0.0 AS RHS"]
        },
        {"DIRECTIVE": ["FROM"], "PREDICATE": ["roads"]}
      ]
    },
    "delayDef_flowSq": {
      "CLASS": "TERM",
      "TYPE": "QUADRATIC",
      "RECIPE": [
        {"DIRECTIVE": ["SELECT"], "PREDICATE": [
          "'QUADRATIC' AS Type",
          "delayDef.Row AS Row",
          "flow.Column AS Column1",
          "flow.Column AS Column2",
          "roads.sensitivity AS Coefficient"]
        },
        {"DIRECTIVE": ["FROM"], "PREDICATE": ["delayDef"]},
        {"DIRECTIVE": ["JOIN"], "PREDICATE": ["roads"]}, {"DIRECTIVE": ["USING"], "PREDICATE": ["(origin, destination)"]},
        {"DIRECTIVE": ["JOIN"], "PREDICATE": ["flow"]},  {"DIRECTIVE": ["USING"], "PREDICATE": ["(origin, destination)"]}
      ]
    },
    "delayDef_flow_delay": {
      "CLASS": "TERM",
      "TYPE": "QUADRATIC",
      "RECIPE": [
        {"DIRECTIVE": ["SELECT"], "PREDICATE": [
          "'QUADRATIC' AS Type",
          "delayDef.Row AS Row",
          "flow.Column AS Column1",
          "delay.Column AS Column2",
          "1.0/roads.capacity AS Coefficient"]
        },
        {"DIRECTIVE": ["FROM"], "PREDICATE": ["delayDef"]},
        {"DIRECTIVE": ["JOIN"], "PREDICATE": ["flow"]},  {"DIRECTIVE": ["USING"], "PREDICATE":[ "(origin, destination)"]},
        {"DIRECTIVE": ["JOIN"], "PREDICATE": ["delay"]}, {"DIRECTIVE": ["USING"], "PREDICATE": ["(origin, destination)"]},
        {"DIRECTIVE": ["JOIN"], "PREDICATE": ["roads"]}, {"DIRECTIVE": ["USING"], "PREDICATE": ["(origin, destination)"]}
      ]
    },
    "delayDef_delay": {
      "CLASS": "TERM",
      "TYPE": "LINEAR",
      "RECIPE": [
        {"DIRECTIVE": ["SELECT"], "PREDICATE": [
          "'LINEAR' AS Type",
          "delayDef.Row AS Row",
          "delay.Column AS Column",
          "-1.0 AS Coefficient"]
        },
        {"DIRECTIVE": ["FROM"], "PREDICATE": ["delayDef"]},
        {"DIRECTIVE": ["JOIN"], "PREDICATE": ["delay"]}, {"DIRECTIVE": ["USING"], "PREDICATE": ["(origin, destination)"]}
      ]
    },
    "balanceNode": {
      "CLASS": "CONSTRAINT",
      "TYPE": "LINEAR",
      "RECIPE": [
        {"DIRECTIVE": ["SELECT"], "PREDICATE": [
          "'balanceNode' AS Name",
          "origin",
          "CONCAT('balanceNode','_', origin) AS Row",
          "'LINEAR' AS Type",
          "'EQ' AS Sense",
          "0.0 AS RHS"]
        },
        {"DIRECTIVE": ["FROM"], "PREDICATE": ["roads"]}
      ]
    },
    "balanceNode_flowOut": {
      "CLASS": "TERM",
      "TYPE": "LINEAR",
      "RECIPE": [
        {"DIRECTIVE": ["SELECT"], "PREDICATE": [
          "balanceNode.Row AS Row",
          "flow.Column AS Column",
          "1.0 AS Coefficient"]
        },
        {"DIRECTIVE": ["FROM"], "PREDICATE": ["balanceNode"]},
        {"DIRECTIVE": ["JOIN"], "PREDICATE": ["flow"]},  {"DIRECTIVE": ["USING"], "PREDICATE":["origin"]}
      ]
    },
    "balanceNode_flowIn": {
      "CLASS": "TERM",
      "TYPE": "LINEAR",
      "RECIPE": [
        {"DIRECTIVE": ["SELECT"], "PREDICATE": [
          "'LINEAR' AS Type",
          "balanceNode.Row AS Row",
          "flow.Column AS Column",
          "-1.0 AS Coefficient"]
        },
        {"DIRECTIVE": ["FROM"], "PREDICATE": ["balanceNode"]},
        {"DIRECTIVE": ["JOIN"], "PREDICATE": ["flow"]},  {"DIRECTIVE": ["ON"], "PREDICATE":["(balanceNode.origin = flow.destination)"]}
      ]
    },
    "balanceEnter": {
      "CLASS": "CONSTRAINT",
      "TYPE": "LINEAR",
      "RECIPE": [
        {"DIRECTIVE": ["SELECT"], "PREDICATE": [
          "'balanceEnter' AS Name",
          "parameters.entrance AS origin",
          "CONCAT('balanceEnter') AS Row",
          "'LINEAR' AS Type",
          "'EQ' AS Sense",
          "parameters.throughput AS RHS"]
        },
        {"DIRECTIVE": ["FROM"], "PREDICATE": ["parameters"]}
      ]
    },
    "balanceEnter_flowOut": {
      "CLASS": "TERM",
      "TYPE": "LINEAR",
      "RECIPE": [
        {"DIRECTIVE": ["SELECT"], "PREDICATE": [
          "'LINEAR' AS Type",
          "balanceEnter.Row AS Row",
          "flow.Column AS Column",
          "1.0 AS Coefficient"]
        },
        {"DIRECTIVE": ["FROM"], "PREDICATE": ["balanceEnter"]},
        {"DIRECTIVE": ["JOIN"], "PREDICATE": ["flow"]},  {"DIRECTIVE": ["USING"], "PREDICATE":["origin"]}
      ]
    }
  }
}