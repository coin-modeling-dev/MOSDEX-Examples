{
  "SYNTAX": "MOSDEX/MOSDEX v1-2/MOSDEXSchemaV1-2.json",
  "cuttingStockMaster": {
    "CLASS": "PROBLEM",
    "HEADING": {
      "DESCRIPTION": [
        "Illustrates how to set up in MOSDEX to specify a decomposition model.",
        "Cutting stock uses column-generation.",
        "This is the master problem."
      ],
      "VERSION"    : ["1-2"],
      "REFERENCE"  : ["https://github.com/IBMDecisionOptimization/DOcloud-Cutting-Stock-Java-Sample"],
      "AUTHOR"     : ["Jeremy A. Bloom (jeremyblmca@gmail.com)"],
      "NOTICES"    : ["Copyright © 2019 Jeremy A. Bloom"],
      "MATH": [
        "dvar float rolls[patterns] in 0..1000000; // Number of rolls cut with each pattern",
        "constraint ctOrder[items];",
        "",
        "dexpr float cost = sum( p in patterns ) p.cost * rolls[p];",
        "",
        "minimize cost;",
        "",
        "subject to {",
        "  forall( i in items )",
        "    ctOrder[i]: // Cut enough rolls to fill the order amount for each item",
        "      sum( p in patterns, c in slices : p.id==c.pattern && i.id==c.item )",
        "         c.number * rolls[p] >= i.order;",
        "}"
      ]
    },
    "items": {
      "CLASS": "DATA",
      "TYPE": "INPUT",
      "IMPORT_FROM": ["cuttingStockData.items"]
    },
    "patterns": {
      "CLASS": "DATA",
      "TYPE": "INPUT",
      "INITIALIZE_FROM": ["cuttingStockData.patterns"],
      "RECIPE": [
        {"DIRECTIVE": ["SELECT"], "PREDICATE": ["*"]},
        {"DIRECTIVE": ["FROM"], "PREDICATE": ["patterns"]},
        {"DIRECTIVE": ["UNION", "SELECT"], "PREDICATE": ["*"]},
        {"DIRECTIVE": ["FROM"], "PREDICATE": ["cuttingStockSubproblem.newPattern"]}
      ]
    },
    "slices": {
      "CLASS": "DATA",
      "TYPE": "INPUT",
      "INITIALIZE_FROM": ["cuttingStockData.slices"],
      "RECIPE": [
        {"DIRECTIVE": ["SELECT"], "PREDICATE": ["*"]},
        {"DIRECTIVE": ["FROM"], "PREDICATE": ["slices"]},
        {"DIRECTIVE": ["UNION", "SELECT"], "PREDICATE": ["*"]},
        {"DIRECTIVE": ["FROM"], "PREDICATE": ["cuttingStockSubproblem.newSlices"]}
      ]
    },
    "rolls": {
      "CLASS": "VARIABLE",
      "TYPE": "CONTINUOUS",
      "RECIPE": [
        {"DIRECTIVE": ["QUERY"], "PREDICATE": [
          "SELECT",
            "'rolls' AS Name",
            "'CONTINUOUS' AS Type",
            "patterns.id AS pattern",
            "CONCAT('rolls','_', patterns.id) AS Column",
            "0.0 AS LowerBound",
            "'infinity' AS UpperBound",
            "null AS Value",
          "FROM", "patterns"]
        }
      ]
    },
    "cost": {
      "CLASS": "OBJECTIVE",
      "TYPE": "LINEAR",
      "SINGLETON": {
        "Name": "cost",
        "Type": "LINEAR",
        "Row": "cost",
        "Constant": 0.0,
        "Sense": "MINIMIZE",
        "Value": null
      }
    },
    "cost_rolls": {
      "CLASS": "TERM",
      "TYPE": "LINEAR",
      "RECIPE": [
        {"DIRECTIVE": ["QUERY"], "PREDICATE": [
          "SELECT", "'LINEAR' AS Type" , "'cost' AS Row", "rolls.Column AS Column", "patterns.cost AS Coefficient",
          "FROM", "rolls",
          "JOIN", "patterns", "ON", "(rolls.pattern = patterns.id)"]
        }
      ]
    },
    "ctOrder": {
      "CLASS": "CONSTRAINT",
      "TYPE": "LINEAR",
      "RECIPE": [
        {"DIRECTIVE": ["QUERY"], "PREDICATE": [
          "SELECT",
            "'ctOrder' AS Name",
            "'LINEAR' AS Type",
            "items.id AS item",
            "CONCAT('ctOrder','_', items.id) AS Row",
            "'>=' AS Sense",
            "items.order AS RHS",
            "null AS Dual",
          "FROM","items"]
        }
      ]
    },
    "ctOrder_rolls": {
      "CLASS": "TERM",
      "TYPE": "LINEAR",
      "RECIPE": [
        {"DIRECTIVE": ["QUERY"], "PREDICATE": [
          "SELECT", "'LINEAR' AS Type", "ctOrder.Row AS Row", "rolls.Column AS Column", "slices.number AS Coefficient",
          "FROM", "ctOrder",
          "JOIN", "patterns",
          "JOIN", "slices", "ON", "((ctOrder.item = slices.item)", "AND", "(patterns.id = slices.pattern))",
          "JOIN", "rolls", "ON", "(patterns.id = rolls.pattern)"]
        }
      ]
    },
    "objective": {
      "CLASS": "DATA",
      "TYPE": "OUTPUT",
      "SINGLETON": {
        "value": "#Solver.getObjValue()"
      }
    },
    "use": {
      "CLASS": "DATA",
      "TYPE": "OUTPUT",
      "RECIPE": [
        {"DIRECTIVE": ["SELECT"], "PREDICATE": ["pattern", "Value AS number"]},
        {"DIRECTIVE": ["FROM"], "PREDICATE": ["rolls"]}
      ]
    },
    "duals": {
      "CLASS": "DATA",
      "TYPE": "OUTPUT",
      "RECIPE": [
        {"DIRECTIVE": ["SELECT"], "PREDICATE": ["item", "Dual AS price"]},
        {"DIRECTIVE": ["FROM"], "PREDICATE": ["ctOrder"]}
      ]
    }
  },
  "cuttingStockSubproblem": {
    "CLASS": "PROBLEM",
    "HEADING": {
      "DESCRIPTION": [
        "Illustrates how to set up in MOSDEX to specify a decomposition model.",
        "Cutting stock uses column-generation.",
        "This is the subproblem."
      ],
      "VERSION"    : ["1.1.1"],
      "REFERENCE"  : ["https://github.com/IBMDecisionOptimization/DOcloud-Cutting-Stock-Java-Sample"],
      "AUTHOR"     : ["Jeremy A. Bloom (jeremyblmca@gmail.com)"],
      "NOTICES"    : ["Copyright © 2019 Jeremy A. Bloom"],
      "MATH": [
        "dvar int slice[items] in 0..100000; // Number of slices of this item in the new pattern",
        "dexpr float reducedCost =",
        "  1 - sum(i in items, d in duals : i.id==d.item) d.price * slice[i];",
        "",
        "minimize reducedCost;",
        "subject to {",
        "  ctFill:",
        "    sum(i in items) i.width * slice[i] <= parameter.rollWidth;",
        "}"
      ]
    },
    "parameters": {
      "CLASS": "DATA",
      "TYPE": "INPUT",
      "INITIALIZE_FROM": ["cuttingStockData.parameters"],
      "RECIPE": [
        {"DIRECTIVE": ["SELECT"], "PREDICATE": ["rollWidth", "nbPatterns+1 AS nbPatterns"]},
        {"DIRECTIVE": ["FROM"], "PREDICATE": ["parameters"]}
      ]
    },
    "items": {
      "CLASS": "DATA",
      "TYPE": "INPUT",
      "IMPORT_FROM": ["cuttingStockData.items"]
    },
    "duals": {
      "CLASS": "DATA",
      "TYPE": "INPUT",
      "IMPORT_FROM": ["cuttingStockMaster.duals"]
    },
    "slice": {
      "CLASS": "VARIABLE",
      "TYPE": "INTEGER",
      "RECIPE": [
        {"DIRECTIVE": ["SELECT"], "PREDICATE": [
          "'slice' AS Name",
          "'INTEGER' AS Type",
          "items.id AS item",
          "CONCAT('slice','_', items.id) AS Column",
          "0.0 AS LowerBound",
          "'infinity' AS UpperBound",
          "null AS Value"]
        },
        {"DIRECTIVE": ["FROM"], "PREDICATE": ["items"]}
      ]
    },
    "ctFill": {
      "CLASS": "CONSTRAINT",
      "TYPE": "LINEAR",
      "RECIPE": [
        {"DIRECTIVE": ["SELECT"], "PREDICATE": [
          "'ctFill' AS Name",
          "'LINEAR' AS Type",
          "'ctFill' AS Row",
          "'LE' AS Sense",
          "parameters.rollWidth AS RHS"]
        },
        {"DIRECTIVE": ["FROM"], "PREDICATE": ["parameters"]}
      ]
    },
    "ctFill_slice": {
      "CLASS": "TERM",
      "TYPE": "LINEAR",
      "RECIPE": [
        {"DIRECTIVE": ["SELECT"], "PREDICATE": ["'LINEAR' AS Type", "ctFill.Row AS Row", "slice.Column AS Column", "items.width AS Coefficient"]},
        {"DIRECTIVE": ["FROM"], "PREDICATE": ["ctFill"]},
        {"DIRECTIVE": ["JOIN"], "PREDICATE": ["items"]},
        {"DIRECTIVE": ["JOIN"], "PREDICATE": ["slice"]}, {"DIRECTIVE": ["ON"], "PREDICATE": ["(slice.item = items.id)"]}
      ]
    },
    "reducedCost": {
      "CLASS": "VARIABLE",
      "TYPE": "CONTINUOUS",
      "SINGLETON": {
        "Name": "reducedCost",
        "Type": "CONTINUOUS",
        "Column": "reducedCost",
        "LowerBound": 0.0,
        "UpperBound": "infinity",
        "Value": null
      }
    },
    "deReducedCost": {
      "CLASS": "OBJECTIVE",
      "TYPE": "LINEAR",
      "SINGLETON": {
        "Name": "deReducedCost",
        "Type": "LINEAR",
        "Row": "deReducedCost",
        "Column": "reducedCost",
        "Constant": 1.0,
        "Sense": "MINIMIZE"
      }
    },
    "deReducedCost_slice": {
      "CLASS": "TERM",
      "TYPE": "LINEAR",
      "RECIPE": [
        {"DIRECTIVE": ["SELECT"], "PREDICATE": ["'LINEAR' AS Type", "'deReducedCost' AS Row", "slice.Column AS Column", "-duals.price AS Coefficient"]},
        {"DIRECTIVE": ["FROM"], "PREDICATE": ["items"]},
        {"DIRECTIVE": ["JOIN"], "PREDICATE": ["slice"]}, {"DIRECTIVE": ["ON"], "PREDICATE": ["(slice.item = items.id)"]},
        {"DIRECTIVE": ["JOIN"], "PREDICATE": ["duals"]}, {"DIRECTIVE": ["ON"], "PREDICATE": ["(duals.item = items.id)"]}
      ]
    },
    "deReducedCost_reducedCost": {
      "CLASS": "TERM",
      "TYPE": "LINEAR",
      "SINGLETON": {
        "Type": "LINEAR",
        "Row": "deReducedCost",
        "Column": "reducedCost",
        "Coefficient": -1.0
      }
    },
    "objective": {
      "CLASS": "OBJECTIVE",
      "TYPE": "LINEAR",
      "SINGLETON": {
        "Name": "objective",
        "Type": "LINEAR",
        "Row": "objective",
        "Constant": 1.0,
        "Sense": "MINIMIZE",
        "Value": null
      }
    },
    "objective_reducedCost": {
      "CLASS": "TERM",
      "TYPE": "LINEAR",
      "SINGLETON": {
        "Type": "LINEAR",
        "Row": "objective",
        "Column": "reducedCost",
        "Coefficient": 1.0
      }
    },
    "newPattern": {
      "CLASS": "DATA",
      "TYPE": "OUTPUT",
      "RECIPE": [
        {"DIRECTIVE": ["SELECT"], "PREDICATE": ["parameters.nbPatterns AS id", "objective.Value AS cost"]},
        {"DIRECTIVE": ["FROM"], "PREDICATE": ["parameters", "objective"]}
      ]
    },
    "newSlices": {
      "CLASS": "DATA",
      "TYPE": "OUTPUT",
      "RECIPE": [
        {"DIRECTIVE": ["SELECT"], "PREDICATE": ["slice.item AS item", "parameters.nbPatterns AS pattern", "slice.Value AS number"]},
        {"DIRECTIVE": ["FROM"], "PREDICATE": ["slice", "parameters"]}
      ]
    }
  },
  "cuttingStockData": {
    "CLASS": "PROBLEM",
    "HEADING": {
      "DESCRIPTION": [
        "Data for a cutting stock instance."
      ]
    },
    "parameters": {
      "CLASS": "DATA",
      "TYPE": "INPUT",
      "SINGLETON": {
        "rollWidth": 110,
        "nbPatterns": 5
      }
    },
    "items": {
      "CLASS": "DATA",
      "TYPE": "INPUT",
      "SCHEMA": {
        "id": "STRING",
        "width": "INTEGER",
        "order": "INTEGER"
      },
      "INSTANCE": [
        ["XJC001_1", 20, 48],
      	["XJC001_2", 45, 35],
      	["XJC001_3", 50, 24],
      	["XJC001_4", 55, 10],
      	["XJC001_5", 75, 8]
      ]
    },
    "patterns": {
      "CLASS": "DATA",
      "TYPE": "INPUT",
      "SCHEMA": {
        "id": "INTEGER",
        "cost": "INTEGER"
      },
      "INSTANCE": [
       [0, 1],
       [1, 1],
       [2, 1],
       [3, 1],
       [4, 1]
      ]
    },
    "slices": {
      "CLASS": "DATA",
      "TYPE": "INPUT",
      "SCHEMA": {
        "item": "STRING",
        "pattern": "INTEGER",
        "number": "INTEGER"
      },
      "INSTANCE": [
        ["XJC001_1", 0, 1],
      	["XJC001_2", 1, 1],
      	["XJC001_3", 2, 1],
      	["XJC001_4", 3, 1],
      	["XJC001_5", 4, 1]
      ]
    }
  }
}